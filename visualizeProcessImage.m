function visualizeProcessImage(...
    save_intermediate_images, ...
    img_path, ...
    byte_img, ...
    single_img, ...
    keypoints, ...
    inlier_keypoints, ...
    coarse_ellipse_center, ...
    coarse_principal_components, ...
    inlier_ellipse_center, ...
    inlier_principal_components, ...
    region_map, ...
    pixels_of_connected_regions, ...
    hull_pts)

% Ensure imshow doesn't pad the images with whitespace
iptsetpref('ImshowBorder', 'tight');

% Use figure 1
figure_1 = figure(1);

% Get the current plotting axes so the future plotting functions can
% overlay on the same plot.
% MUST USE gca. TODO: Don't know why I can't use figure_1.CurrentAxes
ax1 = gca;

% Show image
imshow(single_img);

% Call hold ***AFTER*** drawing the image, otherwise Matlab pads the figure
% window.
hold(ax1, 'on');

% Show keypoints
show_keypoints = true;
if show_keypoints
    
    show_inlier_and_outliers_separately = true;
    if show_inlier_and_outliers_separately
        scatter(...
            ax1, ...
            keypoints(:,1), ...
            keypoints(:,2), ...
            'r');

        scatter(...
            ax1, ...
            inlier_keypoints(:,1), ...
            inlier_keypoints(:,2), ...
            'g');
    else
        scatter(...
            ax1, ...
            keypoints(:,1), ...
            keypoints(:,2), ...
            'g');
    end
end

% Show coarse principal components
show_coarse_principal_components = true;
if show_coarse_principal_components
    mean_matrix = repmat(coarse_ellipse_center, 2, 1);
    
    quiver(...
        ax1, ...
        mean_matrix(:,1), ...
        mean_matrix(:,2), ...
        coarse_principal_components(1,:)', ...
        coarse_principal_components(2,:)', ...
        'r');
end

% Plot ellipse defined by the principal components
show_coarse_ellipse = true;
if show_coarse_ellipse
    plotPCAEllipse(...
        ax1, ...
        coarse_ellipse_center, ...
        coarse_principal_components, ...
        'r');
end

show_inlier_ellipse = true;
if show_inlier_ellipse
    plotPCAEllipse(...
        ax1, ...
        inlier_ellipse_center, ...
        inlier_principal_components, ...
        'g');
end

% Plot the convex hull of the inlier pixel regions
show_convex_hull = false;
if show_convex_hull
    plot(...
        ax1, ...
        pixels_of_connected_regions(hull_pts, 1), ...
        pixels_of_connected_regions(hull_pts, 2), ...
        'c');
end

% Show MSER regions
show_mser_regions = true;
if show_mser_regions
    
    % Draw on figure 2
    figure_2 = figure(2);
    
    % Get axes of figure2 so we can do overlays
    ax2 = gca;
    
    % Show the image
    imshow(byte_img);
    
    % Call hold ***AFTER*** drawing the image, otherwise Matlab pads the 
    % figure window.
    hold(ax2, 'on');
    
    % We use the contour function to display the region_map which will
    % draw lines around the region boundaries
    show_contours = true;
    if show_contours
        
        [~, figure_handle] = contour(...
            ax2, ...
            region_map, ...
            (0:max(region_map(:))) + .5);
        
        set(figure_handle, 'color', 'y', 'linewidth', 3);
    end
    
    % Plot the convex hull of the inlier pixel regions
    if show_convex_hull
        plot(...
            ax2, ...
            pixels_of_connected_regions(hull_pts, 1), ...
            pixels_of_connected_regions(hull_pts, 2), ...
            'c');
    end
    
    % Plot inlier ellipse
    if show_inlier_ellipse
        plotPCAEllipse(...
            ax2, ...
            inlier_ellipse_center, ...
            inlier_principal_components, ...
            'g');
    end
    
    hold(ax2, 'off');
    
    if save_intermediate_images
        [~, file_name, ~] = fileparts(img_path);
        ax2_frame = getframe(ax2);
        imwrite(...
            ax2_frame.cdata, ...
            sprintf('out\\%s_fig2.png', file_name));
    end
end

% Use vl_plot
%     vl_plotframe(frames);

hold(ax1, 'off');

if save_intermediate_images
    [~, file_name, ~] = fileparts(img_path);
    ax1_frame = getframe(ax1);
    imwrite(...
        ax1_frame.cdata, ...
        sprintf('out\\%s_fig1.png', file_name));
end

end